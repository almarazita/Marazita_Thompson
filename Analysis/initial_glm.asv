function X = initial_glm(unit_data, unit_table)
%% Create simple models to examine what neurons are tuned for

%% 1. Set-up
% Choose the unit
unit_idx = 49;
data = unit_data(unit_idx);
unit_id = "Unit " + num2str(unit_table{unit_idx,1});
valid_trials = ~isnan(data.ids.sample_id); % AODR only
num_trials = sum(valid_trials);
    
% We want a 300ms sliding window starting at sample_on
window_size = 300;
step_size = 10;
sac_on_idx = data.times.sac_on(valid_trials)*1000;
earliest_sac_on = round(min(sac_on_idx));

max_start = earliest_sac_on - window_size;
window_starts = sample_on_idx:step_size:max_start;

%% 2. Create a table for the unit to run the model.

% a) Cue location: -4, -3, -2, -1, 0, 1, 2, 3, or 4
cue_loc = data.ids.sample_id;
cue_loc = cue_loc(valid_trials);

% b) Hazard rate: 0.5 or -0.5
hazard = data.values.hazard(valid_trials);
hazard(hazard==0.05) = -0.5; % Center the variable

% c) Firing rate: baseline-subtract, z-scored firing rate over a given
% evoked window after cue onset
% i) Isolate evoked window of interest
sample_on_idx = round(data.times.sample_on*1000) + 1;
sample_on_idx = sample_on_idx(valid_trials);
window_size = 300;
end_idx = sample_on_idx + window_size - 1;
% ii) Subtract the baseline firing rate
evoked = squeeze(data.binned_spikes); % ms x all trials
evoked = evoked(:, valid_trials); % ms x valid trials
baseline = data.epochs.baseline(valid_trials);
baseline_subtracted = evoked - baseline;
baseline_subtracted = baseline_subtracted(sample_on_idx:end_idx, :);
baseline_subtracted = mean(baseline_subtracted, 1, "omitnan"); % 1 x trials
% iii) Z-score (keep interpretation consistent)
mu = mean(baseline_subtracted, "omitnan"); % average over all trials
sigma = std(baseline_subtracted, "omitnan"); % std over all trials
z_scored = (baseline_subtracted - mu) ./ sigma; % 1 x trials
fr = z_scored';

% iv) Combine predictor and response variables into design matrix
X = table(cue_loc, hazard, fr, 'VariableNames', {'cue_loc', 'hazard', 'fr'});

%% 3. Run the model, saving results.
mdl = fitlm(X, 'fr ~ cue_loc*hazard');
coeff = mdl.Coefficients;

% 3. Repeat over a sliding window.
