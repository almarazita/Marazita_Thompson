function plotHazardCueAvgFR(data,u,axs)
%% Plot the mean time-courses of each neuron for the two different hazard rates
% when aligned to multiple different events
% data: 1 x 1 struct with 8 fields for a session
% u: current unit id to plot
% axs: current axes to use for plotting

% Complete overhaul by LWT 1/29/2025

if isempty(axs)
    figure; hold on;
end

n_units = length(data.spikes.id);
%n_trials = data.header.numTrials;
hazards = nonanunique(data.values.hazard);
if length(hazards)>1
    hazard_leg = {[num2str(hazards(1)) ' Hazard'],[ num2str(hazards(2)) ' Hazard']};
else
    hazard_leg = {[num2str(hazards(1)) ' Hazard']};
end
window_size = 300;  %could adjust
alignments = {'sample_on','sac_on'};  %'fp_off','target_off',

cue_locs = nonanunique(data.ids.sample_id);
co = {[4 94 167]./255, [194 0 77]./255};
%p=[];

for a = 1:length(alignments)
    alignment = alignments{a};
    if isempty(axs)
        subplot(2,1,a); hold on;
    else
        %axes(ax(c)); hold on;
        ax = axs(a); hold on;
        axes(ax); hold on;
    end
    % Calculate for each hazard
    for h = 1:length(hazards)
        targ_means = nan(length(cue_locs),1);
        targ_sems = nan(length(cue_locs),1);
        % Calculate for each cue
        for c = 1:length(cue_locs)
            criteria = data.values.hazard==hazards(h) & data.ids.sample_id==cue_locs(c) & ~isnan(data.times.sac_on) & ~isnan(data.times.(char(alignment)));

            tmp = data;
            tmp.binned_spikes = tmp.binned_spikes(u,:,criteria); % unit x ms x trial
            tmp.ids = tmp.ids(criteria,:);
            tmp.times = tmp.times(criteria,:);
            tmp.values = tmp.values(criteria,:);

            % Choose beginning and end times relative to event
            window_width = [0, 300];

            % Get mean target-on activity for 300 ms after target onset for
            % each trial
            [~,target_on] = plotPSTHAligned(tmp,alignment,window_width,[],[],0,0);
            targ_on = mean(targ_on,'omitnan')
            targ_means(c) = mean(target_on,'omitnan');
        end

        ylabel('Firing Rate (sp/s)')
        xlabel('Cue Location')
        if isempty(axs)
            title(['Aligned to ' alignment],'Interpreter', 'none')
            %filename = data.data.header.filename;
            filename = data.fileName;
            startIdx = strfind(filename, 'MM');
            endIdx = strfind(filename, '.hdf5') - 1;
            sessionName = filename(startIdx:endIdx);
            title([sessionName ' U: ' num2str(data.spikes.id(u)) 'Aligned to ' alignment],'Interpreter', 'none')
            legend(hazard_leg)
        else
            if a == 1
                legend(hazard_leg)
            end
            title(['Aligned to ' alignment],'Interpreter', 'none')
        end

    end
end